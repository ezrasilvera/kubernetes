//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	corev1listers "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"
)

// NamespaceClusterLister can list Namespaces across all workspaces, or scope down to a NamespaceLister for one workspace.
type NamespaceClusterLister interface {
	List(selector labels.Selector) (ret []*corev1.Namespace, err error)
	Cluster(cluster logicalcluster.Name) corev1listers.NamespaceLister
}

type namespaceClusterLister struct {
	indexer cache.Indexer
}

// NewNamespaceClusterLister returns a new NamespaceClusterLister.
func NewNamespaceClusterLister(indexer cache.Indexer) *namespaceClusterLister {
	return &namespaceClusterLister{indexer: indexer}
}

// List lists all Namespaces in the indexer across all workspaces.
func (s *namespaceClusterLister) List(selector labels.Selector) (ret []*corev1.Namespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.Namespace))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Namespaces.
func (s *namespaceClusterLister) Cluster(cluster logicalcluster.Name) corev1listers.NamespaceLister {
	return &namespaceLister{indexer: s.indexer, cluster: cluster}
}

// namespaceLister implements the corev1listers.NamespaceLister interface.
type namespaceLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all Namespaces in the indexer for a workspace.
func (s *namespaceLister) List(selector labels.Selector) (ret []*corev1.Namespace, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*corev1.Namespace)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the Namespace from the indexer for a given workspace and name.
func (s *namespaceLister) Get(name string) (*corev1.Namespace, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("Namespace"), name)
	}
	return obj.(*corev1.Namespace), nil
}
