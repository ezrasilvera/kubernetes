//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	corev1listers "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"
)

// PodClusterLister can list Pods across all workspaces, or scope down to a PodLister for one workspace.
type PodClusterLister interface {
	List(selector labels.Selector) (ret []*corev1.Pod, err error)
	Cluster(cluster logicalcluster.Name) corev1listers.PodLister
}

type podClusterLister struct {
	indexer cache.Indexer
}

// NewPodClusterLister returns a new PodClusterLister.
func NewPodClusterLister(indexer cache.Indexer) *podClusterLister {
	return &podClusterLister{indexer: indexer}
}

// List lists all Pods in the indexer across all workspaces.
func (s *podClusterLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.Pod))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Pods.
func (s *podClusterLister) Cluster(cluster logicalcluster.Name) corev1listers.PodLister {
	return &podLister{indexer: s.indexer, cluster: cluster}
}

// podLister implements the corev1listers.PodLister interface.
type podLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all Pods in the indexer for a workspace.
func (s *podLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*corev1.Pod)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Pods returns an object that can list and get Pods in one namespace.
func (s *podLister) Pods(namespace string) corev1listers.PodNamespaceLister {
	return &podNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// podNamespaceLister implements the corev1listers.PodNamespaceLister interface.
type podNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all Pods in the indexer for a given workspace and namespace.
func (s *podNamespaceLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	selectAll := selector == nil || selector.Empty()

	var list []interface{}
	if s.namespace == metav1.NamespaceAll {
		list, err = s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	} else {
		list, err = s.indexer.ByIndex(kcpcache.ClusterAndNamespaceIndexName, kcpcache.ClusterAndNamespaceIndexKey(s.cluster, s.namespace))
	}
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*corev1.Pod)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the Pod from the indexer for a given workspace, namespace and name.
func (s *podNamespaceLister) Get(name string) (*corev1.Pod, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("Pod"), name)
	}
	return obj.(*corev1.Pod), nil
}
